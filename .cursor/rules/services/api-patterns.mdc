---
description: 
globs: src/services/**/*.ts
alwaysApply: false
---
# API Service Patterns

## Service Structure
Follow the established ApiService class pattern with proper error handling and type safety.

## API Service Pattern
```typescript
import Constants from 'expo-constants';
import type { SomeType, CreateSomeData } from '@/types';

const API_BASE_URL = Constants.expoConfig?.extra?.apiUrl ?? 'http://localhost:3000';

interface ApiResponse<T> {
  data: T;
  success: boolean;
  error?: string;
}

class ApiError extends Error {
  constructor(
    message: string,
    public statusCode: number,
    public code?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

class SomeApiService {
  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      const url = `${API_BASE_URL}${endpoint}`;
      const config: RequestInit = {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
        ...options,
      };

      const response = await fetch(url, config);
      
      if (!response.ok) {
        throw new ApiError(
          `HTTP error! status: ${response.status}`,
          response.status
        );
      }

      const data = await response.json();
      return data;
    } catch (error) {
      if (error instanceof ApiError) {
        throw error;
      }
      throw new ApiError(
        error instanceof Error ? error.message : 'Network error',
        0
      );
    }
  }

  // CRUD operations
  async getItems(userId: string): Promise<SomeType[]> {
    const response = await this.request<SomeType[]>(`/items?userId=${userId}`);
    return response.data;
  }

  async createItem(data: CreateSomeData): Promise<SomeType> {
    const response = await this.request<SomeType>('/items', {
      method: 'POST',
      body: JSON.stringify(data),
    });
    return response.data;
  }

  async updateItem(id: string, data: Partial<SomeType>): Promise<SomeType> {
    const response = await this.request<SomeType>(`/items/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
    return response.data;
  }

  async deleteItem(id: string): Promise<void> {
    await this.request<void>(`/items/${id}`, {
      method: 'DELETE',
    });
  }
}

// Export singleton instance
export const someApiService = new SomeApiService();
export { ApiError };
```

## API Standards
- Use the established ApiService class pattern
- Include proper TypeScript interfaces for requests/responses
- Use ApiResponse<T> wrapper for all responses
- Implement proper error handling with ApiError class
- Use singleton pattern for service instances
- Include proper HTTP methods (GET, POST, PATCH, DELETE)
- Handle network errors gracefully
- Use Expo Constants for API configuration

## Error Handling
- Use ApiError class for structured error information
- Include status codes and error messages
- Differentiate between network and API errors
- Provide fallback mechanisms when API is unavailable

## API Patterns
- **CRUD Operations**: Standard create, read, update, delete
- **Query Parameters**: Use URLSearchParams for complex queries
- **Authentication**: Include auth headers when needed
- **Caching**: Work with React Query caching strategies
